// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Profile (extends Clerk user data)
model UserProfile {
  id            String    @id @default(cuid())
  clerkId       String    @unique // Clerk user ID
  email         String    @unique
  firstName     String?
  lastName      String?
  imageUrl      String?
  major         String?
  academicYear  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  settings      UserSettings?
  studyGroups   StudyGroupMember[]
  materials     StudyMaterial[]
  notifications Notification[]
  preferences   NotificationPreferences?
  analytics     StudyAnalytics?
  recommendations AIRecommendation[]
  studySessions StudySession[]
}

// User Settings
model UserSettings {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Theme settings
  themeMode     String    @default("system") // "light" | "dark" | "system"
  fontSize      String    @default("medium") // "small" | "medium" | "large"
  
  // Language settings
  language      String    @default("en-US")
  region        String    @default("us")
  dateFormat    String    @default("mdy")
  
  // Security settings
  twoFactorEnabled Boolean @default(false)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Study Materials
model StudyMaterial {
  id            String    @id @default(cuid())
  title         String
  description   String?
  type          String    // "note" | "pdf" | "link" | "flashcard"
  content       String?   // For notes and flashcards
  fileUrl       String?   // For PDFs
  linkUrl       String?   // For web links
  tags          Tag[]
  userId        String
  user          UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyGroupId  String?
  studyGroup    StudyGroup? @relation(fields: [studyGroupId], references: [id])
  studySessions StudySession[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Tags for Study Materials
model Tag {
  id            String    @id @default(cuid())
  name          String    @unique
  color         String?
  materials     StudyMaterial[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Study Groups
model StudyGroup {
  id            String    @id @default(cuid())
  name          String
  description   String?
  members       StudyGroupMember[]
  materials     StudyMaterial[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Study Group Members
model StudyGroupMember {
  id            String    @id @default(cuid())
  userId        String
  user          UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyGroupId  String
  studyGroup    StudyGroup @relation(fields: [studyGroupId], references: [id], onDelete: Cascade)
  role          String    @default("member") // "admin" | "member"
  joinedAt      DateTime  @default(now())

  @@unique([userId, studyGroupId])
}

// Notifications
model Notification {
  id            String    @id @default(cuid())
  userId        String
  user          UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          String    // "deadline" | "study_group" | "ai_recommendation"
  title         String
  message       String
  read          Boolean   @default(false)
  createdAt     DateTime  @default(now())
}

// Notification Preferences
model NotificationPreferences {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  deadlineReminders  Boolean @default(true)
  studyGroupUpdates  Boolean @default(true)
  aiRecommendations  Boolean @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Study Analytics
model StudyAnalytics {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalStudyTime Int      @default(0) // in minutes
  focusScore    Int      @default(0) // 0-100
  materialsCount Int     @default(0)
  lastStudyDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// AI Recommendations
model AIRecommendation {
  id            String    @id @default(cuid())
  userId        String
  user          UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          String    // "study_plan" | "resource" | "technique"
  content       String
  priority      Int       @default(0)
  read          Boolean   @default(false)
  createdAt     DateTime  @default(now())
}

// Study Sessions
model StudySession {
  id            String    @id @default(cuid())
  userId        String
  user          UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  startTime     DateTime
  endTime       DateTime?
  duration      Int?      // in minutes
  focusScore    Int?      // 0-100
  materials     StudyMaterial[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
